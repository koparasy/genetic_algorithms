This is the Readme file for eps-moea code.
Released on 9 May 2005

About the Algorithm
--------------------------------------------------------------------------
A Fast Multi-objective Evolutionary Algorithm for Finding Well-Spread Pareto-optimal Solutions

Please refer to the following paper for details about the algorithm:

Authors: Dr. Kalyanmoy Deb, Manikanth Mohan and Shikhar Mishra
Paper Title: A Fast Multi-objective Evolutionary Algorithm for Finding Well-Spread Pareto-optimal Solutions
KanGAL Report Number 2003002
---------------------------------------------------------------------------


Modifications in the code in comparison to paper
---------------------------------------------------------------------------
Formulation for crossover and mutation has been changed. Distribution of
children is different in different regions of search space depending upon
the distance between parents and distance of parents from variable bounds.
It now uses a higly disruptive mutation operator because of which the
algorithm tries to sway away from a local optima. Recombination operator
allocates the resultant variables with uniform probablity instead of giving
bias to a particular parent or both the parents.
---------------------------------------------------------------------------


How to compile and run the program
---------------------------------------------------------------------------
Makefile has been provided for compiling the program on linux (and unix-like)
systems. Edit the Makefile to suit your need. By default, provided Makefile
attempts to compile and link all the existing source files into one single
executable.

Name of the executable produced is: main

To run the program type: ./main random_seed
Here random_seed is a real number in (0,1) which is used as a seed for random
number generator.
You can also store all the input data in a text file and use a redirection
operator to give the inputs to the program in a convenient way.
You may use the following syntax: ./main random_seed <inp_file.in, where
"inp_file.in" is the file that stores all the input parameters
---------------------------------------------------------------------------


About the output files
---------------------------------------------------------------------------
initial_pop.out: This file contains all the information about initial population.
final_pop.out: This file contains the data of final population.
all_archive.out: This file containts the data of archive at all
function evalutions.
*************** IMPORTANT **********************
If you would not like to print all generation information (TO SAVE
TIME), comment three lines (349 to 351) in file epsmoea.c
	fprintf(fpt4,"# eval id = %d\n",currenteval);
	report_archive (elite, fpt4);
	fflush(fpt4);
final_archive.out: This file contains the best solutions obtained at the end of simulation run.
params.out: This file contains the information about input parameters as read by the program.
---------------------------------------------------------------------------


About the input parameters
---------------------------------------------------------------------------
popsize: This variable stores the population size (a multiple of 4)
neval: Number of function evaluations
nobj: Number of objectives
epsilon[i]: minimum allowable tolerance in i^{th} objective
min_obj[i]: minimum possible value of i^{th} objective
ncon: Number of constraints
nreal: Number of real variables
min_realvar[i]: minimum value of i^{th} real variable
max_realvar[i]: maximum value of i^{th} real variable
pcross_real: probability of crossover of real variable
pmut_real: probability of mutation of real variable
eta_c: distribution index for real variable SBX crossover
eta_m: distribution index for real variable polynomial mutation
nbin: number of binary variables
nbits[i]: number of bits for i^{th} binary variable
min_binvar[i]: minimum value of i^{th} binary variable
max_binvar[i]: maximum value of i^{th} binary variable
pcross_bin: probability of crossover for binary variable
pmut_bin: probability of mutation for binary variable
---------------------------------------------------------------------------


Defining the Test Problem
---------------------------------------------------------------------------
Edit the source file problemdef.c to define your test problem. Some sample
problems (24 test problems from Dr. Deb's book - Multi-Objective Optimization
using Evolutionary Algorithms) have been provided as examples to guide you
define your own objective and constraint functions. You can also link other
source files with the code depending on your need.
Following points are to be kept in mind while writing objective and constraint
functions.
1. The code has been written for minimization of objectives (min f_i). If you want to
maximize a function, you may use negetive of the function value as the objective value.
2. A solution is said to be feasible if it does not violate any of the constraints.
Constraint functions should evaluate to a quantity greater than or equal to zero
(g_j >= 0), if the solution has to be feasible. A negetive value of constraint means,
it is being violated.
3. If there are more than one constraints, it is advisable (though not mandatory)
to normalize the constraint values by either reformulating them or dividing them
by a positive non-zero constant.
---------------------------------------------------------------------------


About the files
---------------------------------------------------------------------------
global.h: Header file containing declaration of global variables and functions
rand.h: Header file containing declaration of variables and functions for random
number generator
allocate.c: Memory allocation and deallocation routines
copy.c: Routine to copy the information of an individual into another individual
crossover.c: Routines for real and binary crossover
decode.c: Routine to decode binary variables
dominance.c: Routine to perform non-domination checking
epsmoea.c: Implementation of the main function and eps-moea framework
eval.c: Routine to evaluate constraint violation and objective function values
initialize.c: Routine to perform random initialization of population members
list.c: A custom doubly linked list implementation
mutation.c: Routines for real and binary mutation
problemdef.c: Test problem definitions
rand.c: Random number generator related routines
report.c: Routines to write the population and archive information in a file
tournament.c: Tournament selection routine
update.c: Routines to update archive and population
---------------------------------------------------------------------------

Please feel free to send questions/comments/doubts/suggestions/bugs
etc. to deb@iitk.ac.in

Dr. Kalyanmoy Deb
9th May 2005
http://www.iitk.ac.in/kangal/
---------------------------------------------------------------------------
